<?php

declare(strict_types=1);

namespace Core\View\Template;

use Core\Symfony\DependencyInjection\Autodiscover;
use Core\View\Document;
use Core\View\Html\Element;
use Core\View\Template\DocumentView\{Head};
use Psr\Log\LoggerInterface;
use InvalidArgumentException;

#[Autodiscover( tag : 'core.service_locator', autowire : true )]
final class DocumentView extends Element
{
    public readonly Head $head;

    public function __construct(
        public readonly Document          $document,
        private readonly ?LoggerInterface $logger = null,
    ) {
        $this->head = new Head();
        parent::__construct(
            tag        : 'html',
            attributes : $this->document->html,
            head       : $this->head,
            body       : $this->document->body,
        );

        $this->document->html( status : 'loading', id : 'top' );
    }

    protected function build() : string
    {
        foreach ( $this->document->getDocumentMeta() as $meta => $value ) {
            if ( ! $value ) {
                continue;
            }
            match ( $meta ) {
                'title'       => $this->head->title( $value ),
                'description' => $this->head->description( $value ),
                'keywords'    => $this->head->keywords( $value ),
                'author'      => $this->head->author( $value ),
            };
        }

        foreach ( $this->document->getMeta() as $name => $properties ) {
            if ( \is_int( $name ) ) {
                $name = null;
            }
            $this->head->meta( $name, ...$properties );
        }

        foreach ( $this->document->getRawHeadHtml() as $html ) {
            $this->head->injectHtml( $html );
        }

        // foreach ( $this->document as $property => $value ) {
        //     if ( \is_string( $value ) ) {
        //         $set = [$property, $value];
        //     }
        //     elseif ( \is_array( $value ) ) {
        //         $set = [$property, ...$value];
        //     }
        //     else {
        //         throw new InvalidArgumentException();
        //     }
        //     $this->head->meta( ...$set );
        // }

        return parent::build(); // TODO: Change the autogenerated stub
    }
}
